How 2 minecraft mod the text document:

First go get urself a nice forge mdk from http://files.minecraftforge.net/
then extract it into a folder somewhere

Then delete everything deleted in this commit right here:
https://github.com/Shadows-of-Fire/How2Mod/commit/d55fbaa0f6d84c91f5114053fa302e4da9bcb0f7

Now you need to go actually get the gradle wrapper again, since you just deleted 2.14 (the very old version forge ships)
https://gradle.org/releases/ Go get yourself the binary-only edition of the latest gradle.
Since this is the actual version of gradle, you'll need to do a few things to use it.

You have two options here: Either install gradle to your system, or temporarily extract and generate the wrapper files.

Since the second option is less compilated, let's go with that.

So extract the gradle zip into some folder, then run the command "gradle w" from a command prompt or command line.
then run "gradle --stop" to close the daemon so you can delete this folder later.
Now you have generated 4 files you need to go put the wrapper back in your forge workspace.

gradlew
gradlew.bat
gradle (folder)

Move those three things into the dir with your mdk and then we can get back to that. (you can then delete the old gradle folder). See commit: https://github.com/Shadows-of-Fire/How2Mod/commit/e4ba4e1b92751816d7267780b8f84b759cc2757b

Then if you want a bit of understanding about the build.gradle, I've changed the default comments on them because they are useless. https://github.com/Shadows-of-Fire/How2Mod/blob/8b52990a88a6318e68a43d540754ff70ce5218a9/build.gradle

Now, there are a few things you need for this (one of them is a JDK, the other is an IDE).
If you dont have a JDK, you need to install it and properly configure it.
http://www.oracle.com/technetwork/java/javase/downloads/index.html
(I won't be going over that)
If you don't have an IDE, you need to go get one.  The only "supported" ones are IntelliJ IDEA and Eclipse.
I use eclipse, but this is a preference thing, so it really doesn't matter.
https://www.jetbrains.com/idea/download/ <- IntelliJ IDEA
https://www.eclipse.org/downloads/ <- Eclipse (giant Download 64 Bit button)

So now you have all those things you can actually start making a mod woo nice job
Back to the forge folder and run the command "gradlew sDecW eclipse" (for eclipse) or "gradlew sDecW idea" (for IDEA).
sDecW means setupDecompWorkspace (it's literally just the shorter command version, either works) and the second command makes certain IDE files.
sDecW will take a while, so just sit there and let it do stuff.  If it fails, it probably means your JDK is improperly configured.  The whole process is that this command downloads forge, the mappings, and minecraft.  It then decompiles minecraft, deobfuscates it (remaps most of the method and field names into readable ones), and then recompiles it so it can run in a dev environment, and creates a linked source jar for you to work with.  It's basically all magic.

Now here's the part where its important that I use eclipse, because if you're using IDEA, you'll have to figure out the idea equivalent of certain things I do.  *anyway* lets begin.

Now that your sDecW is finished (you should see a BUILD SUCCESSFUL) in the command window, you need to import the project into your IDE.  I think i'm gonna start using newlines here to split Eclipse and IDEA, in case anyone wants to write in here how that works.

ECLIPSE:  Use the import function and import an Existing Gradle Project.  Then just direct it to the folder containing your build.gradle and hit finish. Then you should end up with this: https://imgur.com/KLCwWmu

IDEA: ?

So now we basically just have the example mod in here. (com.example.examplemod.ExampleMod)
Which you can work with easily, but you should probably just completely ignore and make your own thing.

Before you delete the example mod, it might be useful to look at what is in it.  It's very basic, but it still has the important conceps that define a mod.

First off, the @Mod annotation, which marks your class as a main mod class for forge to load.
Now, there are 3 main variables you want to set in @Mod, being modid, version, and name.
the ExampleMod doesn't set name, so it defaults being your modid.
You'll also want to define all three of these as variables somewhere else, since you will need them in other places. (just as the example mod does).

It also has an @EventHandler for the init event, (you'll eventually have one for preInit, init, and postInit to do stuff).
Timing is very important with forge, so, the events are in place for a reason.

Okay so now delete the ExampleMod and it's package because those are useless and it doesn't matter.

So, now you want to create your own mod class.  If you made it this far you should already understand java naming convention, so pick a class name and a package and just poof make ur class.
Once you have that, update your group in your build.gradle to reflect this package name.
